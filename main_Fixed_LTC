import socket
import json
import time
import hashlib
import binascii
import struct
import pyopencl as cl
import numpy as np
import logging

# Konfigurasi Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# Konfigurasi Pool dan Wallet
POOL_ADDRESS = "ltc.viabtc.com"
POOL_PORT = 3333
WALLET = "ltc1q9lqhxasss9wnjznfkyqca7pmv77utfz8ds0mwa"
WORKER_NAME = "Arufcuy.001"
PASSWORD = "123"

# Kernel Scrypt + SHA-256 dengan perbandingan 256-bit
SCRYPT_KERNEL = """
#define ROTL(a, b) (((a) << (b)) | ((a) >> (32 - (b))))
#define QR(a, b, c, d) { \
    a += b; d ^= a; d = ROTL(d, 16); \
    c += d; b ^= c; b = ROTL(b, 12); \
    a += b; d ^= a; d = ROTL(d, 8); \
    c += d; b ^= c; b = ROTL(b, 7); \
}

void sha256_transform(uint *state, const uchar *block) {
    uint W[64];
    uint a, b, c, d, e, f, g, h, t1, t2;
    const uint K[64] = {
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    #pragma unroll
    for (int i = 0; i < 16; i++) {
        W[i] = (block[i*4] << 24) | (block[i*4+1] << 16) | (block[i*4+2] << 8) | block[i*4+3];
    }
    for (int i = 16; i < 64; i++) {
        uint s0 = ROTL(W[i-15], 7) ^ ROTL(W[i-15], 18) ^ (W[i-15] >> 3);
        uint s1 = ROTL(W[i-2], 17) ^ ROTL(W[i-2], 19) ^ (W[i-2] >> 10);
        W[i] = W[i-16] + s0 + W[i-7] + s1;
    }

    a = state[0]; b = state[1]; c = state[2]; d = state[3];
    e = state[4]; f = state[5]; g = state[6]; h = state[7];

    #pragma unroll
    for (int i = 0; i < 64; i++) {
        t1 = h + (ROTL(e, 6) ^ ROTL(e, 11) ^ ROTL(e, 25)) + ((e & f) ^ (~e & g)) + K[i] + W[i];
        t2 = (ROTL(a, 2) ^ ROTL(a, 13) ^ ROTL(a, 22)) + ((a & b) ^ (a & c) ^ (b & c));
        h = g; g = f; f = e; e = d + t1;
        d = c; c = b; b = a; a = t1 + t2;
    }

    state[0] += a; state[1] += b; state[2] += c; state[3] += d;
    state[4] += e; state[5] += f; state[6] += g; state[7] += h;
}

void salsa20_8(uint *B) {
    uint x[16];
    #pragma unroll
    for (int i = 0; i < 16; i++) x[i] = B[i];
    #pragma unroll
    for (int i = 8; i > 0; i -= 2) {
        x[4] ^= rotate(x[0] + x[12], 7U);  x[8] ^= rotate(x[4] + x[0], 9U);
        x[12] ^= rotate(x[8] + x[4], 13U); x[0] ^= rotate(x[12] + x[8], 18U);
        x[9] ^= rotate(x[5] + x[1], 7U);  x[13] ^= rotate(x[9] + x[5], 9U);
        x[1] ^= rotate(x[13] + x[9], 13U); x[5] ^= rotate(x[1] + x[13], 18U);
        x[14] ^= rotate(x[10] + x[6], 7U); x[2] ^= rotate(x[14] + x[10], 9U);
        x[6] ^= rotate(x[2] + x[14], 13U); x[10] ^= rotate(x[6] + x[2], 18U);
        x[3] ^= rotate(x[15] + x[11], 7U); x[7] ^= rotate(x[3] + x[15], 9U);
        x[11] ^= rotate(x[7] + x[3], 13U); x[15] ^= rotate(x[11] + x[7], 18U);
        x[1] ^= rotate(x[0] + x[3], 7U);  x[2] ^= rotate(x[1] + x[0], 9U);
        x[3] ^= rotate(x[2] + x[1], 13U); x[0] ^= rotate(x[3] + x[2], 18U);
        x[6] ^= rotate(x[5] + x[4], 7U);  x[7] ^= rotate(x[6] + x[5], 9U);
        x[4] ^= rotate(x[7] + x[6], 13U); x[5] ^= rotate(x[4] + x[7], 18U);
        x[11] ^= rotate(x[10] + x[9], 7U); x[8] ^= rotate(x[11] + x[10], 9U);
        x[9] ^= rotate(x[8] + x[11], 13U); x[10] ^= rotate(x[9] + x[8], 18U);
        x[12] ^= rotate(x[15] + x[14], 7U); x[13] ^= rotate(x[12] + x[15], 9U);
        x[14] ^= rotate(x[13] + x[12], 13U); x[15] ^= rotate(x[14] + x[13], 18U);
    }
    #pragma unroll
    for (int i = 0; i < 16; i++) B[i] += x[i];
}

bool hash_less_than_target(const uchar *hash, const uchar *target) {
    for (int i = 31; i >= 0; i--) {
        if (hash[i] < target[i]) return true;
        if (hash[i] > target[i]) return false;
    }
    return false; // Equal
}

__kernel void scrypt_full(__global const uchar *header, __global uint *output, __global uchar *hash_out, 
                         const uint nonce_start, __global const uchar *target, const int work_size) {
    int gid = get_global_id(0);
    uint nonce = nonce_start + gid;
    uchar block[80];
    uint X[32];
    uint V[32 * 1024]; // N=1024, r=1

    // Copy header dan tambahkan nonce
    #pragma unroll
    for (int i = 0; i < 76; i++) block[i] = header[i];
    block[76] = (nonce >> 0) & 0xFF;
    block[77] = (nonce >> 8) & 0xFF;
    block[78] = (nonce >> 16) & 0xFF;
    block[79] = (nonce >> 24) & 0xFF;

    // Scrypt
    #pragma unroll
    for (int i = 0; i < 32; i++) X[i] = ((uint*)block)[i];
    for (int i = 0; i < 1024; i++) {
        #pragma unroll
        for (int j = 0; j < 32; j++) V[i * 32 + j] = X[j];
        salsa20_8(X);
    }
    for (int i = 0; i < 1024; i++) {
        uint j = X[16] & 1023;
        #pragma unroll
        for (int k = 0; k < 32; k++) X[k] ^= V[j * 32 + k];
        salsa20_8(X);
    }

    // SHA-256 pertama
    uint state[8] = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 
                     0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};
    uchar padded[64];
    #pragma unroll
    for (int i = 0; i < 32; i++) padded[i] = ((uchar*)X)[i];
    padded[32] = 0x80;
    #pragma unroll
    for (int i = 33; i < 56; i++) padded[i] = 0;
    ((uint*)padded)[14] = 0;
    ((uint*)padded)[15] = 256; // Panjang pesan 32 byte dalam bit
    sha256_transform(state, padded);

    // SHA-256 kedua
    uchar hash1[32];
    #pragma unroll
    for (int i = 0; i < 8; i++) ((uint*)hash1)[i] = state[i];
    #pragma unroll
    for (int i = 0; i < 32; i++) padded[i] = hash1[i];
    padded[32] = 0x80;
    #pragma unroll
    for (int i = 33; i < 56; i++) padded[i] = 0;
    ((uint*)padded)[14] = 0;
    ((uint*)padded)[15] = 256;
    state[0] = 0x6a09e667; state[1] = 0xbb67ae85; state[2] = 0x3c6ef372; state[3] = 0xa54ff53a;
    state[4] = 0x510e527f; state[5] = 0x9b05688c; state[6] = 0x1f83d9ab; state[7] = 0x5be0cd19;
    sha256_transform(state, padded);

    // Hash akhir dalam little-endian
    uchar hash[32];
    #pragma unroll
    for (int i = 0; i < 8; i++) {
        hash[i*4] = (state[i] >> 24) & 0xFF;
        hash[i*4+1] = (state[i] >> 16) & 0xFF;
        hash[i*4+2] = (state[i] >> 8) & 0xFF;
        hash[i*4+3] = state[i] & 0xFF;
    }

    // Bandingkan hash dengan target 256-bit
    if (hash_less_than_target(hash, target)) {
        output[gid] = nonce;
        #pragma unroll
        for (int i = 0; i < 32; i++) hash_out[gid * 32 + i] = hash[i];
    } else {
        output[gid] = 0xFFFFFFFF;
    }
}
"""

class LitecoinMinerGPU:
    def __init__(self):
        self.sock = None
        self.extranonce1 = None
        self.extranonce2_size = None
        self.hash_count = 0
        self.start_time = time.time()
        self.ctx = None
        self.queue = None
        self.setup_gpu()

    def setup_gpu(self):
        try:
            platforms = cl.get_platforms()
            if not platforms:
                raise RuntimeError("No OpenCL platforms found!")
            devices = platforms[0].get_devices(device_type=cl.device_type.GPU)
            if not devices:
                raise RuntimeError("No GPU found!")
            self.ctx = cl.Context(devices)
            self.queue = cl.CommandQueue(self.ctx, properties=cl.command_queue_properties.PROFILING_ENABLE)
            logging.info(f"Using GPU: {devices[0].name}")
        except Exception as e:
            logging.error(f"GPU setup failed: {e}")
            raise

    def connect_to_pool(self):
        logging.info(f"Connecting to {POOL_ADDRESS}:{POOL_PORT}...")
        for attempt in range(3):
            try:
                self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.sock.settimeout(30)
                self.sock.connect((POOL_ADDRESS, POOL_PORT))
                logging.info("Connected to pool!")
                return True
            except Exception as e:
                logging.error(f"Connection failed (attempt {attempt + 1}/3): {e}")
                time.sleep(5)
        logging.error("Failed to connect after 3 attempts")
        return False

    def send(self, data):
        try:
            self.sock.sendall((json.dumps(data) + "\n").encode())
            logging.debug(f"Sent: {json.dumps(data)}")
        except Exception as e:
            logging.error(f"Send failed: {e}")

    def recv(self):
        buffer = ""
        timeout_count = 0
        while True:
            try:
                data = self.sock.recv(16384).decode()
                if not data:
                    logging.warning("Received empty data")
                    return None
                buffer += data
                if "\n" in buffer:
                    logging.debug(f"Raw received: {buffer.strip()}")
                    return buffer.strip()
                time.sleep(0.1)
            except socket.timeout:
                timeout_count += 1
                logging.error(f"Receive timeout ({timeout_count}/3)")
                if timeout_count >= 3:
                    return None
                time.sleep(5)
            except Exception as e:
                logging.error(f"Receive failed: {e}")
                return None

    def parse_response(self, response):
        if not response:
            logging.warning("No response to parse")
            return []
        parsed = []
        for line in response.split("\n"):
            if line.strip():
                try:
                    parsed.append(json.loads(line.strip()))
                except json.JSONDecodeError as e:
                    logging.error(f"JSON parse failed: {e} | Raw: {line}")
        return parsed

    def calculate_merkle_root(self, coinbase, merkle_branch):
        coinbase_hash = hashlib.sha256(hashlib.sha256(bytes.fromhex(coinbase)).digest()).digest()
        merkle_root = coinbase_hash
        for branch in merkle_branch:
            merkle_root = hashlib.sha256(hashlib.sha256(merkle_root + bytes.fromhex(branch)).digest()).digest()
        return binascii.hexlify(merkle_root).decode()

    def calculate_target(self, nbits):
        exponent = int(nbits[:2], 16)
        coefficient = int(nbits[2:], 16)
        target_int = coefficient * 2**(8 * (exponent - 3))
        target_bytes = target_int.to_bytes(32, byteorder='big')
        logging.debug(f"nbits: {nbits}, Calculated target (256-bit): {binascii.hexlify(target_bytes).decode()}")
        return target_bytes

    def suggest_difficulty(self):
        # Minta difficulty rendah agar share lebih mudah ditemukan
        self.send({"id": 3, "method": "mining.suggest_difficulty", "params": [256]})
        response = self.parse_response(self.recv())
        if response and "result" in response[0]:
            logging.info(f"Difficulty suggested: {response[0]['result']}")
        else:
            logging.warning("Failed to suggest difficulty")

    def scrypt_hash(self, header, target):
        mf = cl.mem_flags
        input_buf = cl.Buffer(self.ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=header[:76])
        target_buf = cl.Buffer(self.ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=target)
        output_buf = cl.Buffer(self.ctx, mf.WRITE_ONLY, 65536 * 4)
        hash_buf = cl.Buffer(self.ctx, mf.WRITE_ONLY, 65536 * 32)

        program = cl.Program(self.ctx, SCRYPT_KERNEL).build()
        kernel = program.scrypt_full

        nonce_start = np.random.randint(0, 2**32 - 65536, dtype=np.uint32)
        nonce_range = 65536
        logging.debug(f"Nonce start: {nonce_start}, Target: {binascii.hexlify(target).decode()}, Header: {binascii.hexlify(header[:76]).decode()}")

        try:
            kernel(self.queue, (nonce_range,), (256,), input_buf, output_buf, hash_buf, 
                   np.uint32(nonce_start), target_buf, np.int32(nonce_range))
            self.queue.finish()
        except Exception as e:
            logging.error(f"Kernel execution failed: {e}")
            raise

        nonce_out = np.zeros(nonce_range, dtype=np.uint32)
        hash_out = np.zeros(nonce_range * 32, dtype=np.uint8)
        cl.enqueue_copy(self.queue, nonce_out, output_buf)
        cl.enqueue_copy(self.queue, hash_out, hash_buf)

        for i in range(nonce_range):
            if nonce_out[i] != 0xFFFFFFFF:
                hash_result = hash_out[i * 32:(i + 1) * 32].tobytes()
                logging.info(f"Found valid nonce: {nonce_out[i]:08x}")
                return hash_result, nonce_out[i]
        return None, None

    def subscribe(self):
        self.send({"id": 1, "method": "mining.subscribe", "params": []})
        sub_response = self.parse_response(self.recv())
        if sub_response:
            self.extranonce1 = sub_response[0]["result"][1]
            self.extranonce2_size = sub_response[0]["result"][2]
            logging.info("Subscribed to pool")
            return True
        logging.error("Subscribe failed")
        return False

    def authorize(self):
        self.send({"id": 2, "method": "mining.authorize", "params": [WORKER_NAME, PASSWORD]})
        auth_response = self.parse_response(self.recv())
        if auth_response and auth_response[0]["result"]:
            logging.info("Authorized with pool")
            return True
        logging.error("Authorize failed")
        return False

    def mine_job(self, job_data):
        job_id = job_data["params"][0]
        prev_hash = job_data["params"][1]
        coinbase1 = job_data["params"][2]
        coinbase2 = job_data["params"][3]
        merkle_branch = job_data["params"][4]
        version = job_data["params"][5]
        nbits = job_data["params"][6]
        ntime = job_data["params"][7]

        logging.info(f"New job: {job_id}")

        extranonce2 = "00" * self.extranonce2_size
        coinbase = coinbase1 + self.extranonce1 + extranonce2 + coinbase2
        merkle_root = self.calculate_merkle_root(coinbase, merkle_branch)

        header = (bytes.fromhex(version) + bytes.fromhex(prev_hash) +
                  bytes.fromhex(merkle_root) + bytes.fromhex(ntime) + bytes.fromhex(nbits))
        target = self.calculate_target(nbits)

        self.hash_count = 0
        self.start_time = time.time()

        while True:
            hash_result, nonce = self.scrypt_hash(header, target)
            self.hash_count += 65536

            if hash_result:
                logging.info(f"Valid share found! Nonce: {nonce:08x}, Hash: {binascii.hexlify(hash_result).decode()}")
                submit_payload = {
                    "id": 4,
                    "method": "mining.submit",
                    "params": [WORKER_NAME, job_id, extranonce2, ntime, f"{nonce:08x}"]
                }
                self.send(submit_payload)
                logging.info(f"Submit response: {self.recv()}")
                break

            hashrate = self.hash_count / (time.time() - self.start_time) / 1_000_000
            logging.info(f"Mining job {job_id} | Hashrate: {hashrate:.2f} MH/s")

    def mine(self):
        if not self.connect_to_pool():
            return

        if not self.subscribe():
            return

        self.suggest_difficulty()  # Minta difficulty rendah

        if not self.authorize():
            return

        for _ in range(3):
            initial_response = self.recv()
            if initial_response:
                for data in self.parse_response(initial_response):
                    if "method" in data and data["method"] == "mining.notify":
                        self.mine_job(data)
                        break
                else:
                    continue
                break
            logging.warning("No initial job, retrying...")
            time.sleep(5)
        else:
            logging.error("Failed to get initial job after retries")
            return

        while True:
            response = self.recv()
            if not response:
                logging.warning("Pool disconnected, reconnecting...")
                time.sleep(5)
                if not self.connect_to_pool():
                    continue
                if not self.subscribe():
                    continue
                self.suggest_difficulty()
                if not self.authorize():
                    continue
                continue

            for data in self.parse_response(response):
                if "method" in data and data["method"] == "mining.notify":
                    self.mine_job(data)

def main():
    try:
        miner = LitecoinMinerGPU()
        miner.mine()
    except KeyboardInterrupt:
        logging.info("Mining stopped by user")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")

if __name__ == "__main__":
    main()
